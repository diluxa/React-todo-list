{"version":3,"sources":["Components/Header.js","Components/TarefasLista.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Header","estado","pegaTarefa","adicionaTarefa","className","onSubmit","type","name","id","placeholder","value","onChange","TarefaLista","tarefas","deletarTarefa","atualizarTarefa","listaTarefas","map","tarefa","key","chave","rows","texto","event","target","icon","onClick","duration","easing","library","add","faTrash","App","state","tarefaAtual","this","setState","Date","now","preventDefault","novaTarefa","console","log","novositems","filtraItens","filter","item","itens","pegarInput","bind","addTarefa","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAaeA,G,kBAXA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,eACjC,OACI,4BAAQC,UAAU,aACd,0BAAMA,UAAU,wBAAwBC,SAAUF,GAC9C,2BAAOC,UAAU,mBAAmBE,KAAK,SAASC,KAAK,GAAGC,GAAG,GAAGC,YAAY,SAASC,MAAOT,EAAQU,SAAUT,IAC9G,2BAAOE,UAAU,mBAAmBE,KAAK,SAASI,MAAM,Y,cC8BzDE,EAjCK,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,gBACpCC,EAAeH,EAAQI,KAAI,SAACC,GAC9B,OACI,yBAAKd,UAAU,oBAAoBe,IAAKD,EAAOE,OAC3C,uBAAGhB,UAAU,2BACT,8BAEAiB,KAAK,IACLjB,UAAU,sBACVI,GAAIU,EAAOE,MACXV,MAAOQ,EAAOI,MACdX,SACI,SAACY,GACGR,EAAgBQ,EAAMC,OAAOd,MAAOQ,EAAOE,WAKvD,8BACI,kBAAC,IAAD,CAAiBhB,UAAU,UAAUqB,KAAK,QAAQC,QAAS,kBAAMZ,EAAcI,EAAOE,eAKtG,OACI,6BACI,kBAAC,IAAD,CAAUO,SAAU,IAAKC,OAAO,eAC3BZ,KCtBjBa,IAAQC,IAAIC,K,IAgEGC,E,kDA7Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXpB,QAAS,GACTqB,YAAa,CACXZ,MAAO,GACPF,MAAO,KANC,E,uDAUHG,GACTY,KAAKC,SAAS,CACZF,YAAa,CACXZ,MAAOC,EAAMC,OAAOd,MACpBU,MAAOiB,KAAKC,W,gCAIRf,GACRA,EAAMgB,iBACN,IAAMC,EAAaL,KAAKF,MAAMC,YAE9B,GADAO,QAAQC,IAAIF,GACY,KAArBA,EAAWlB,MAAc,CAC1B,IAAMqB,EAAU,sBAAOR,KAAKF,MAAMpB,SAAlB,CAA2B2B,IAC3CL,KAAKC,SAAS,CACZvB,QAAS8B,EACTT,YAAa,CACXZ,MAAO,GACPF,MAAO,S,oCAKDA,GACZ,IAAMwB,EAAcT,KAAKF,MAAMpB,QAAQgC,QAAO,SAAAC,GAAI,OAAIA,EAAK1B,QAAUA,KACrEe,KAAKC,SAAS,CACZvB,QAAS+B,M,sCAGGtB,EAAMF,GACpB,IAAM2B,EAAQZ,KAAKF,MAAMpB,QACzBkC,EAAM9B,KAAI,SAAC6B,GACNA,EAAK1B,QAAUA,IAChB0B,EAAKxB,MAAQA,MAGjBa,KAAKC,SAAS,CACZvB,QAASkC,M,+BAIX,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,CAAQH,OAAQkC,KAAKF,MAAMC,YAAYZ,MAAOpB,WAAYiC,KAAKa,WAAWC,KAAKd,MAAOhC,eAAgBgC,KAAKe,UAAUD,KAAKd,QAC1H,kBAAC,EAAD,CAAa/B,UAAU,cAAcS,QAASsB,KAAKF,MAAMpB,QAASC,cAAeqB,KAAKrB,cAAcmC,KAAKd,MAAOpB,gBAAiBoB,KAAKpB,gBAAgBkC,KAAKd,a,GAvDjJgB,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.82f8cbff.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({estado, pegaTarefa, adicionaTarefa}) => {\n    return (\n        <header className='cabecalho'>\n            <form className='cabecalho__formulario' onSubmit={adicionaTarefa}>\n                <input className='cabecalho__campo' type=\"search\" name=\"\" id=\"\" placeholder='Tarefa' value={estado} onChange={pegaTarefa}></input>\n                <input className='cabecalho__botao' type=\"submit\" value='Add'></input>\n            </form>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\n\nconst TarefaLista = ({tarefas, deletarTarefa, atualizarTarefa}) => {\n    const listaTarefas = tarefas.map((tarefa) => {\n        return (\n            <div className='TarefasLista__div' key={tarefa.chave}>\n                <p className='TarefasLista__paragrafo'>\n                    <textarea\n                    // cols='30'\n                    rows='2'\n                    className='TarefasLista__input' \n                    id={tarefa.chave} \n                    value={tarefa.texto}\n                    onChange={\n                        (event) => {\n                            atualizarTarefa(event.target.value, tarefa.chave);\n                        }\n                    }\n                    />\n                </p>\n                <span>\n                    <FontAwesomeIcon className='faicons' icon='trash' onClick={() => deletarTarefa(tarefa.chave)}/>\n                </span>\n            </div>\n        )\n    })\n    return (\n        <div>\n            <FlipMove duration={300} easing='ease-in-out'>\n                {listaTarefas}\n            </FlipMove>\n        </div>\n    )\n}\n\nexport default TarefaLista;","import React, { Component } from 'react';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\nimport '../Components/Header.css';\nimport '../Components/TarefasLista.css';\nimport Header from '../Components/Header';\nimport TarefaLista from '../Components/TarefasLista';\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {//estados dinamicos\n      tarefas: [],\n      tarefaAtual: {\n        texto: '',\n        chave: ''\n      }\n    }\n  }\n  pegarInput(event) {//funcao\n    this.setState({\n      tarefaAtual: {\n        texto: event.target.value,\n        chave: Date.now()\n      }\n    })\n  }\n  addTarefa(event) {//funcao\n    event.preventDefault();\n    const novaTarefa = this.state.tarefaAtual;\n    console.log(novaTarefa);\n    if(novaTarefa.texto !== '') {\n      const novositems = [...this.state.tarefas, novaTarefa];\n      this.setState({\n        tarefas: novositems,\n        tarefaAtual: {\n          texto: '',\n          chave: ''\n        }\n      })\n    }\n  }\n  deletarTarefa(chave) {\n    const filtraItens = this.state.tarefas.filter(item => item.chave !== chave);\n    this.setState({\n      tarefas: filtraItens\n    })\n  }\n  atualizarTarefa(texto,chave) {\n    const itens = this.state.tarefas;\n    itens.map((item) => {\n      if(item.chave === chave) {\n        item.texto = texto;\n      }\n    })\n    this.setState({\n      tarefas: itens\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header estado={this.state.tarefaAtual.texto} pegaTarefa={this.pegarInput.bind(this)} adicionaTarefa={this.addTarefa.bind(this)}/>\n        <TarefaLista className='TarefaLista' tarefas={this.state.tarefas} deletarTarefa={this.deletarTarefa.bind(this)} atualizarTarefa={this.atualizarTarefa.bind(this)}>\n        </TarefaLista>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}